basePath: /v1
definitions:
  main.CategoryResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  main.CreateCategoryPayload:
    properties:
      name:
        minLength: 5
        type: string
    required:
    - name
    type: object
  main.CreateUserPayload:
    properties:
      email:
        maxLength: 21
        type: string
      password:
        maxLength: 12
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.RegisterPayload:
    properties:
      email:
        minLength: 5
        type: string
      password:
        minLength: 5
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.UpdateCategoryPayload:
    properties:
      name:
        minLength: 5
        type: string
    required:
    - name
    type: object
  main.WriteJSONError.envelope:
    properties:
      errors:
        items:
          type: string
        type: array
    type: object
  main.jsonResponse.envelope:
    properties:
      data: {}
    type: object
  repository.Category:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Restful API Documentation for Gobali app.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Gobali Restful API
  version: "1.0"
paths:
  /authentication/register:
    post:
      consumes:
      - application/json
      description: Register new user
      parameters:
      - description: Payload register new user
        in: body
        name: Payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/main.jsonResponse.envelope'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
      summary: Register user
      tags:
      - auth
  /categories:
    get:
      description: Get all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/main.jsonResponse.envelope'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/main.CategoryResponse'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
      summary: Get categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create category
      parameters:
      - description: json format payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateCategoryPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/main.jsonResponse.envelope'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
      summary: Create category
      tags:
      - categories
  /categories/{ID}:
    delete:
      description: Delete Category by ID
      parameters:
      - description: Category ID
        in: path
        name: ID
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
      summary: Delete Category
      tags:
      - categories
    get:
      description: Get category by ID
      parameters:
      - description: category id
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/main.jsonResponse.envelope'
            - properties:
                data:
                  $ref: '#/definitions/repository.Category'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
      summary: Get category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update Category by ID
      parameters:
      - description: Category ID
        in: path
        name: ID
        required: true
        type: integer
      - description: Payload update category
        in: body
        name: Payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateCategoryPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/main.jsonResponse.envelope'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
      summary: Update Category
      tags:
      - categories
  /health:
    get:
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/main.jsonResponse.envelope'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
  /users:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: Payload create user
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/main.jsonResponse.envelope'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
      summary: Create user
      tags:
      - users
  /users/activate/{token}:
    put:
      description: Activate user after register account
      parameters:
      - description: token activation
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/main.jsonResponse.envelope'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/main.WriteJSONError.envelope'
      summary: Activate user
      tags:
      - users
schemes:
- http
- https
swagger: "2.0"
